
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 12 21:27:00 SGT 2021
//----------------------------------------------------

package qp.parser;

import qp.utils.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 12 21:27:00 SGT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\003\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\007\000\002\003\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\006\000\002\004\006\000\002" +
    "\004\011\000\002\004\011\000\002\004\007\000\002\004" +
    "\007\000\002\005\005\000\002\005\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\004\000\002\006\005\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\006\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\020\006\001\002\000\012\002\uffff\023" +
    "\114\024\113\025\115\001\002\000\004\002\112\001\002" +
    "\000\022\004\016\011\014\026\013\027\020\030\007\031" +
    "\012\032\010\033\015\001\002\000\004\006\107\001\002" +
    "\000\004\006\104\001\002\000\014\002\ufff0\005\ufff0\021" +
    "\ufff0\024\ufff0\034\ufff0\001\002\000\004\006\101\001\002" +
    "\000\004\006\076\001\002\000\004\021\072\001\002\000" +
    "\020\004\016\011\060\026\013\027\020\030\007\031\012" +
    "\032\010\001\002\000\006\003\055\010\056\001\002\000" +
    "\006\005\024\021\025\001\002\000\004\006\021\001\002" +
    "\000\016\004\016\026\013\027\020\030\007\031\012\032" +
    "\010\001\002\000\004\007\023\001\002\000\040\002\uffe5" +
    "\003\uffe5\005\uffe5\007\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\034\uffe5\001\002\000\016\004\016\026\013\027\020\030" +
    "\007\031\012\032\010\001\002\000\004\004\026\001\002" +
    "\000\016\002\uffee\005\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\001\002\000\016\002\ufff7\005\030\022\031\023\ufff7" +
    "\024\ufff7\025\ufff7\001\002\000\004\004\053\001\002\000" +
    "\020\003\034\004\016\026\013\027\020\030\007\031\012" +
    "\032\010\001\002\000\020\003\042\012\044\013\047\014" +
    "\046\015\041\016\043\017\045\001\002\000\014\002\uffec" +
    "\005\uffec\023\uffec\024\uffec\025\uffec\001\002\000\004\035" +
    "\040\001\002\000\014\002\ufff9\005\036\023\ufff9\024\ufff9" +
    "\025\ufff9\001\002\000\020\003\034\004\016\026\013\027" +
    "\020\030\007\031\012\032\010\001\002\000\014\002\uffed" +
    "\005\uffed\023\uffed\024\uffed\025\uffed\001\002\000\014\002" +
    "\uffe8\005\uffe8\023\uffe8\024\uffe8\025\uffe8\001\002\000\020" +
    "\004\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035" +
    "\uffdd\001\002\000\014\002\uffe9\005\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\001\002\000\020\004\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\035\uffdb\001\002\000\020\004\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\001" +
    "\002\000\020\004\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\035\uffdc\001\002\000\020\004\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\035\uffde\001\002\000\020" +
    "\004\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\001\002\000\020\004\016\026\013\027\020\030\007" +
    "\031\012\032\010\035\052\001\002\000\014\002\uffea\005" +
    "\uffea\023\uffea\024\uffea\025\uffea\001\002\000\014\002\uffeb" +
    "\005\uffeb\023\uffeb\024\uffeb\025\uffeb\001\002\000\016\002" +
    "\uffef\005\uffef\022\uffef\023\uffef\024\uffef\025\uffef\001\002" +
    "\000\014\002\ufff1\005\ufff1\021\ufff1\024\ufff1\034\ufff1\001" +
    "\002\000\040\002\uffe1\003\uffe1\005\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\034\uffe1\001\002\000\004\004\057" +
    "\001\002\000\040\002\uffe7\003\uffe7\005\uffe7\007\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\034\uffe7\001\002\000\004\021" +
    "\066\001\002\000\006\005\024\021\062\001\002\000\004" +
    "\004\026\001\002\000\016\002\ufff3\005\030\022\064\023" +
    "\ufff3\024\ufff3\025\ufff3\001\002\000\020\003\034\004\016" +
    "\026\013\027\020\030\007\031\012\032\010\001\002\000" +
    "\014\002\ufff5\005\036\023\ufff5\024\ufff5\025\ufff5\001\002" +
    "\000\004\004\026\001\002\000\016\002\ufff2\005\030\022" +
    "\070\023\ufff2\024\ufff2\025\ufff2\001\002\000\020\003\034" +
    "\004\016\026\013\027\020\030\007\031\012\032\010\001" +
    "\002\000\014\002\ufff4\005\036\023\ufff4\024\ufff4\025\ufff4" +
    "\001\002\000\004\004\026\001\002\000\016\002\ufff6\005" +
    "\030\022\074\023\ufff6\024\ufff6\025\ufff6\001\002\000\020" +
    "\003\034\004\016\026\013\027\020\030\007\031\012\032" +
    "\010\001\002\000\014\002\ufff8\005\036\023\ufff8\024\ufff8" +
    "\025\ufff8\001\002\000\016\004\016\026\013\027\020\030" +
    "\007\031\012\032\010\001\002\000\004\007\100\001\002" +
    "\000\040\002\uffe6\003\uffe6\005\uffe6\007\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\034\uffe6\001\002\000\016\004\016\026" +
    "\013\027\020\030\007\031\012\032\010\001\002\000\004" +
    "\007\103\001\002\000\040\002\uffe3\003\uffe3\005\uffe3\007" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\034\uffe3\001\002\000" +
    "\016\004\016\026\013\027\020\030\007\031\012\032\010" +
    "\001\002\000\004\007\106\001\002\000\040\002\uffe2\003" +
    "\uffe2\005\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\034" +
    "\uffe2\001\002\000\016\004\016\026\013\027\020\030\007" +
    "\031\012\032\010\001\002\000\004\007\111\001\002\000" +
    "\040\002\uffe4\003\uffe4\005\uffe4\007\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\034\uffe4\001\002\000\004\002\000\001\002" +
    "\000\016\004\016\026\013\027\020\030\007\031\012\032" +
    "\010\001\002\000\016\004\016\026\013\027\020\030\007" +
    "\031\012\032\010\001\002\000\004\020\006\001\002\000" +
    "\004\002\001\001\002\000\010\002\ufffe\005\024\024\120" +
    "\001\002\000\016\004\016\026\013\027\020\030\007\031" +
    "\012\032\010\001\002\000\010\002\ufffb\005\024\034\122" +
    "\001\002\000\004\002\ufffa\001\002\000\010\002\ufffd\005" +
    "\024\034\124\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\003\004\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\016\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\060\006\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\053\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\031\010\034\011\032\001" +
    "\001\000\004\012\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\031\011\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\062\001\001\000\002\001\001\000\010" +
    "\006\031\010\064\011\032\001\001\000\002\001\001\000" +
    "\004\007\066\001\001\000\002\001\001\000\010\006\031" +
    "\010\070\011\032\001\001\000\002\001\001\000\004\007" +
    "\072\001\001\000\002\001\001\000\010\006\031\010\074" +
    "\011\032\001\001\000\002\001\001\000\004\006\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\122\006\010\001\001\000\006" +
    "\005\116\006\010\001\001\000\004\004\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\120\006\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	
	public SQLQuery query;

	public SQLQuery getSQLQuery() {
		return query;
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
  	/* stop parsing (not really necessary since we throw an exception, but) */
  	done_parsing();
  	
  	/* use the normal error message reporting to put out the message */
  	report_error("Fatal error occurred, stop parsing.", info);
	}
	
	public void syntax_error(Symbol cur_token){}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op ::= EQUAL 
            {
              Condition RESULT = null;
		
			RESULT = new Condition(Condition.EQUAL);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op ::= NOTEQUAL 
            {
              Condition RESULT = null;
			
		  RESULT = new Condition(Condition.NOTEQUAL);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op ::= GTOE 
            {
              Condition RESULT = null;
		
			RESULT = new Condition(Condition.GTOE);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op ::= LTOE 
            {
              Condition RESULT = null;
		
			RESULT = new Condition(Condition.LTOE);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op ::= GREATERTHAN 
            {
              Condition RESULT = null;
		
			RESULT = new Condition(Condition.GREATERTHAN);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op ::= LESSTHAN 
            {
              Condition RESULT = null;
		
			RESULT = new Condition(Condition.LESSTHAN);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute ::= ID error 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("syntax error: incorrect attribute:"+ i.text());
			System.exit(0);
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attribute ::= AVG LEFTBRACKET attribute RIGHTBRACKET 
            {
              Attribute RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			at.setAggType(Attribute.AVG);
			RESULT = at;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attribute ::= COUNT LEFTBRACKET attribute RIGHTBRACKET 
            {
              Attribute RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			at.setAggType(Attribute.COUNT);
			RESULT = at;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attribute ::= SUM LEFTBRACKET attribute RIGHTBRACKET 
            {
              Attribute RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			at.setAggType(Attribute.SUM);
			RESULT = at;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attribute ::= MIN LEFTBRACKET attribute RIGHTBRACKET 
            {
              Attribute RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			at.setAggType(Attribute.MIN);
			RESULT = at;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // attribute ::= MAX LEFTBRACKET attribute RIGHTBRACKET 
            {
              Attribute RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			at.setAggType(Attribute.MAX);
			RESULT = at;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // attribute ::= ID DOT ID 
            {
              Attribute RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i2 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new Attribute(i1.text(),i2.text());
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= error STRINGLIT 
            {
              Condition RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("syntax error: incorrect condition:"+s.text());
			System.exit(0);
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= attribute error 
            {
              Condition RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("syntax error: incorrect condition");
			System.exit(0);
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition ::= attribute op attribute 
            {
              Condition RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Attribute a1 = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Attribute a2 = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Condition c = new Condition(a1,o.getExprType(),a2);
			c.setOpType(Condition.JOIN);
			RESULT = c;
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= attribute op STRINGLIT 
            {
              Condition RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Condition c = new Condition(at,o.getExprType(),s.text());
			c.setOpType(Condition.SELECT);
			RESULT = c;
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conditionlist ::= condition 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Condition> clist = new ArrayList<>();
			clist.add(c);
			RESULT = clist;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*conditionlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conditionlist ::= conditionlist COMMA condition 
            {
              ArrayList RESULT = null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList clist = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			clist.add(c);
			RESULT = clist;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*conditionlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tablelist ::= ID 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<String> tlist = new ArrayList<>();
			tlist.add(i.text());
			RESULT = tlist;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*tablelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tablelist ::= tablelist COMMA ID 
            {
              ArrayList RESULT = null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList tlist = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			tlist.add(i.text());
			RESULT = tlist;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*tablelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attlist ::= attribute 
            {
              ArrayList RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Attribute> v = new ArrayList<>();
			v.add(at);
			RESULT = v;
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*attlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // attlist ::= attlist COMMA attribute 
            {
              ArrayList RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList as = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			as.add(a);
			RESULT = as;
	    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*attlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sqlquery ::= SELECT DISTINCT STAR FROM tablelist 
            {
              SQLQuery RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t);
			sq.setIsDistinct(true);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sqlquery ::= SELECT DISTINCT attlist FROM tablelist 
            {
              SQLQuery RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SQLQuery sq = new SQLQuery(a,t);
			sq.setIsDistinct(true);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sqlquery ::= SELECT DISTINCT STAR FROM tablelist WHERE conditionlist 
            {
              SQLQuery RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t,c);
			sq.setIsDistinct(true);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sqlquery ::= SELECT DISTINCT attlist FROM tablelist WHERE conditionlist 
            {
              SQLQuery RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SQLQuery sq = new SQLQuery(a,t,c);
			sq.setIsDistinct(true);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sqlquery ::= SELECT STAR FROM tablelist 
            {
              SQLQuery RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sqlquery ::= SELECT attlist FROM tablelist 
            {
              SQLQuery RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SQLQuery sq = new SQLQuery(a,t);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sqlquery ::= SELECT STAR FROM tablelist WHERE conditionlist 
            {
              SQLQuery RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t,c);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sqlquery ::= SELECT attlist FROM tablelist WHERE conditionlist 
            {
              SQLQuery RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SQLQuery sq = new SQLQuery(a,t,c);
			RESULT = sq;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sqlquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // finalquery ::= sqlquery GROUPBY attlist ORDERBY attlist DESC 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            s.setGroupByList(a);
            s.setOrderByList(b);
			s.setDescendingOrder();
            parser.query = s;
            RESULT = s;
        
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // finalquery ::= sqlquery GROUPBY attlist ORDERBY attlist 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            s.setGroupByList(a);
            s.setOrderByList(b);
            parser.query = s;
            RESULT = s;
        
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // finalquery ::= sqlquery ORDERBY attlist DESC 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            s.setOrderByList(a);
			s.setDescendingOrder();
            parser.query = s;
            RESULT = s;
        
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // finalquery ::= sqlquery ORDERBY attlist 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            s.setOrderByList(a);
            parser.query = s;
            RESULT = s;
        
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // finalquery ::= sqlquery GROUPBY attlist 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            s.setGroupByList(a);
			parser.query = s;
            RESULT = s;
        
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // finalquery ::= sqlquery 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.query = s;
			RESULT = s;
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= finalquery EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLQuery start_val = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // finalquery ::= sqlquery INTERSECT sqlquery 
            {
              SQLQuery RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SQLQuery s = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SQLQuery t = (SQLQuery)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			SQLQuery r = new SQLQuery(s, t);
			parser.query = r;
			RESULT = r;
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*finalquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

